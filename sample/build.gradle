buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.14.1'
        // To depend on the deployed version of the plugin add the following line here:
//        classpath 'com.novoda:gradle-android-command-plugin:1.3.0'
    }
}
apply plugin: 'com.android.application'
// apply android-command AFTER android plugin
apply plugin: 'android-command'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion '21.1.0'

    defaultConfig {
        versionCode 1
        versionName 'v0.0.1'

        minSdkVersion 14
        targetSdkVersion 19
    }

    buildTypes {
        debug {}
        release {}
        QA {}
    }

    productFlavors {

        flavorDimensions "pricing", "releaseType"

        beta {
            flavorDimension "releaseType"
        }

        normal {
            flavorDimension "releaseType"
        }

        free {
            flavorDimension "pricing"
        }

        paid {
            flavorDimension "pricing"
        }
    }

    // change APK name to include the version name
    applicationVariants.all { variant ->
        def file = variant.outputs[0].packageApplication.outputFile
        variant.outputs[0].packageApplication.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + ".apk"))
    }

    command {
        deviceId {
            def apiLevel = defaultConfig.minSdkVersion.getApiLevel()
            def minSdkDevices = devices().grep { it.sdkVersion() >= apiLevel }
            if (!minSdkDevices) {
                throw new IllegalStateException('No device found running android version >= ' + apiLevel)
            }
            minSdkDevices[0].id
        }

        events 1000
        sortBySubtasks false


        task('runAmazon', com.novoda.gradle.command.Run) {
            deviceId {
                def kindles = devices().grep({ it.brand() == 'Amazon' })
                if (!kindles) {
                    throw new GroovyRuntimeException('No Amazon device found')
                }
                kindles[0].id
            }
        }

        task('runNewest', com.novoda.gradle.command.Run, ['installDevice']) {
            deviceId {
                def device = devices().max { it.sdkVersion() }
                device.id
            }
        }

        task autoLogin(type: com.novoda.gradle.command.Input) {
            script {
                2.times {
                    text 'bob'
                    enter()
                }
                enter()
            }
        }

        task listDevices << {
            println()
            println "Attached devices:"
            devices().each {
                println it
            }
        }
    }
}

/**
* Uses the Files task type to backup sync photos an the device to
* some local directory.
* Only pulls files that are newer than the ones already backed up.
*/
task syncPhotos(type: com.novoda.gradle.command.Files) {
    deviceId {
        def moto = android.command.devices().find ({ it.brand() == 'motorola' })
        if (!moto) {
            throw new GroovyRuntimeException('No Motorola device found')
        }
        moto.id
    }
    script {
        def deviceImageDir = '/sdcard/DCIM/Camera/'
        def backupDir = file('motoPhoto')
        backupDir.mkdir()
        def archivedImageFiles = backupDir.listFiles()

        list(deviceImageDir).findAll { item ->
            item.name.endsWith('jpg') && !item.name.contains(':nopm:') 
        }
        .each { item ->
            if (!new File(backupDir.path, item.name).exists()) {
                println item
                pull item.path + item.name, backupDir.path
            }
        }
    }
}


