buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.2'
        // To depend on the deployed version of the plugin add the following line here:
//        classpath 'com.novoda:gradle-android-command-plugin:1.2.1'
    }
}
apply plugin: 'com.android.application'
// apply android-command AFTER android plugin
apply plugin: 'android-command'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    defaultConfig {
        versionCode 1
        versionName 'v0.0.1'

        minSdkVersion 14
        targetSdkVersion 20
    }

    buildTypes {
        debug {}
        release {}
        QA {}
    }

    productFlavors {

        flavorDimensions "pricing", "releaseType"

        beta {
            flavorDimension "releaseType"
        }

        normal {
            flavorDimension "releaseType"
        }

        free {
            flavorDimension "pricing"
        }

        paid {
            flavorDimension "pricing"
        }
    }

    command {
//        deviceId = devices().max{it.sdkVersion()}.id
        deviceId {
            devices().grep { it.brand() == 'motorola' }?.head().id
        }
//        deviceId = devices().grep { it.brand() == 'hudl' }.head().id

//        events 1000

        task('runAmazon', com.novoda.gradle.command.Run) {
            deviceId {
                def kindles = devices().grep({ it.brand() == 'Amazon' })
                if (!kindles) {
                    throw new GroovyRuntimeException('No Amazon device found')
                }
                kindles[0].id
            }
        }

//        task('runNewest', com.novoda.gradle.command.Run, ['installDevice']) {
//            deviceId = devices().max({ it.sdkVersion() })?.id
//        }
//
//        task('bigMonkey', com.novoda.gradle.command.Monkey, ['installDevice']) {
//            events {
//                if (devices().grep { it.id == deviceId }[0].brand() != 'Amazon')
//                    return 2222
//                return 5000
//            }
//        }

        sortBySubtasks false

    }

}


task autoLogin(type: com.novoda.gradle.command.Input) {
    script {
        2.times {
            text 'bob'
            enter()
        }
        enter()
    }
}


task syncPhotos(type: com.novoda.gradle.command.Files) {
    script {
        def dir = '/sdcard/DCIM/Camera/'
        def imageDir = new File('urlaub')
        imageDir.mkdir()
        def newestTimestamp = imageDir.listFiles()?.sort({-it.lastModified()})?.head()?.lastModified()
        def startDate = new Date(newestTimestamp)
        list(dir).each { com.novoda.gradle.command.FileInfo item ->
            if (item.timestamp.after(startDate)) {
                if (item.name.endsWith('jpg') && !item.name.contains(':nopm:'))  {
                    println item
                    pull item.path + item.name, 'urlaub'
                }
            }
        }
    }
}

task listDevices << {
    println()
    println "Attached devices:"
    android.command.devices().grep { it.sdkVersion() >= 14 }.each {
        println(it.manufacturer() + " " + it.brand() + " " + it.model() + " " + it.id)
    }
}

task runAndLogin(dependsOn: [autoLogin])

afterEvaluate {
    runAndLogin.dependsOn 'runFreeBetaDebug'
    autoLogin.mustRunAfter 'runFreeBetaDebug'
}

tasks.addRule('login') { String taskname ->
    if (taskname.startsWith("loginrun")) {
        task(taskname, dependsOn: [autoLogin, taskname - "login"])
        autoLogin.mustRunAfter taskname - "login"
    }
}

tasks.addRule("Pattern: ping<ID>") { String taskName ->
    if (taskName.startsWith("ping")) {
        task(taskName) << {
            println "Pinging: " + (taskName - 'ping')
        }
    }
}
