buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.1'
        // To depend on the deployed version of the plugin add the following line here:
//        classpath 'com.novoda:gradle-android-command-plugin:1.3.0'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'android-command'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion '21.1.2'

    defaultConfig {
        versionCode 1
        versionName 'v0.0.1'

        minSdkVersion 14
        targetSdkVersion 19
    }

    buildTypes {
        debug {}
        release {}
        QA {}
    }

    productFlavors {

        flavorDimensions "pricing", "releaseType"

        beta {
            flavorDimension "releaseType"
        }

        normal {
            flavorDimension "releaseType"
        }

        free {
            flavorDimension "pricing"
        }

        paid {
            flavorDimension "pricing"
        }
    }

    // change APK name to include the version name
    applicationVariants.all { variant ->
        def file = variant.outputs[0].packageApplication.outputFile
        variant.outputs[0].packageApplication.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + ".apk"))
    }

    command {
        deviceId {
            def apiLevel = defaultConfig.minSdkVersion.getApiLevel()
            def minSdkDevices = devices().grep { it.sdkVersion() >= apiLevel }
            if (!minSdkDevices) {
                throw new IllegalStateException('No device found running android version >= ' + apiLevel)
            }
            minSdkDevices[0].id
        }

        events 1000
        sortBySubtasks false


        task('instHudl', com.novoda.gradle.command.Install) {
            deviceId {
                def hudlDevices = devices().grep { it.brand() == 'hudl' }
                if (!hudlDevices) {
                    throw new GroovyRuntimeException('No hudl device found')
                }
                hudlDevices[0].id
            }
        }

        task('runNewest', com.novoda.gradle.command.Run, ['installDevice']) {
            deviceId {
                def device = devices().max { it.sdkVersion() }
                if (!device) {
                    throw new GroovyRuntimeException('No device found')
                }
                device.id
            }
        }

        task('bigMonkey', com.novoda.gradle.command.Monkey, ['installDevice']) {
            events {
                if (devices().grep { it.id == deviceId }[0].brand() != 'Amazon')
                    return 2222
                return 5000
            }
        }


        task autoLogin(type: com.novoda.gradle.command.Input) {
            script {
                2.times {
                    text 'bob'
                    enter()
                }
                enter()
            }
        }

        task listDevices << {
            println()
            println "Attached devices:"
            devices().each {
                println it
            }
        }
    }
}
